name: Build and Push Docker Image

on:
  push:
    tags:
      - '*.*.*-develop'
      - '*.*.*-staging'
      - '*.*.*'

env:
  DOCKER_IMAGE: ilhasoft/zeroshot-mistral-7b

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.meta.outputs.version }}
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: type=ref,event=tag
          flavor: latest=false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy_to_runpod:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python Dependencies
        run: pip install requests pyyaml

      - name: Set environment from YAML config
        run: |
          import yaml
          import os

          with open('config.yaml', 'r') as file:
              config = yaml.safe_load(file)

          env_file = os.getenv('GITHUB_ENV')

          with open(env_file, 'a') as env:
              for key, value in config.items():
                  env.write(f'RUNPOD_VAR_{key}={value}\n')
        shell: python

      - name: Deploy to RunPod - Staging
        if: contains(github.ref, 'staging')
        run: python -u runpod.py
        working-directory: .github/workflows
        env:
          RUNPOD_IMAGE: ${{ env.DOCKER_IMAGE }}:${{ needs.build_and_push.outputs.version }}
          RUNPOD_TOKEN: ${{ secrets.RUNPOD_TOKEN }}
          RUNPOD_ENDPOINT: "zeroshot-staging"
          SAFE_DEPLOY: "false"

      - name: Deploy to RunPod - Production
        if: ${{ !contains(github.ref, 'staging') && !contains(github.ref, 'develop') }}
        run: python runpod.py
        working-directory: .github/workflows
        env:
          RUNPOD_IMAGE: ${{ env.DOCKER_IMAGE }}:${{ needs.build_and_push.outputs.version }}
          RUNPOD_TOKEN: ${{ secrets.RUNPOD_TOKEN }}
          RUNPOD_ENDPOINT: "zeroshot-staging"

  promote_endpoint:
    needs: [build_and_push, deploy_to_runpod]
    if: ${{ !contains(github.ref, 'staging') && !contains(github.ref, 'develop') }}
    runs-on: ubuntu-latest
    environment: production
    env:
      MANIFESTS_REPOSITORY: weni-ai/kubernetes-manifests-artificial-intelligence
      MANIFESTS_APPLICATION: runpod-proxy
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python Dependencies
        run: pip install requests

      - name: Promote Staging to Production - RunPod
        id: promote
        run: python -u runpod.py promote
        working-directory: .github/workflows
        env:
          RUNPOD_TOKEN: ${{ secrets.RUNPOD_TOKEN }}
          RUNPOD_SOURCE_ENDPOINT: "zeroshot-staging-preview"
          RUNPOD_TARGET_ENDPOINT: "zeroshot-staging"

      - name: Check out Kubernetes Manifests
        uses: actions/checkout@v3
        with:
          ref: sandbox
          repository: ${{ env.MANIFESTS_REPOSITORY }}
          token: ${{ secrets.DEVOPS_GITHUB_PERMANENT_TOKEN }}
          path: ./kubernetes-manifests/

      - name: Update values on Deployment
        run: |
          MANIFESTS_ENVIRONMENTS=("develop" "production")

          for ENV in "${MANIFESTS_ENVIRONMENTS[@]}"; do
              MANIFESTS_PATCH_TARGET="${ENV}/deployment.json"
              if [ -f "$MANIFESTS_PATCH_TARGET" ]; then
                  cat <<< $(jq --arg new_endpoint "${{ steps.promote.outputs.endpoint }}" '.[0].value = $new_endpoint' $MANIFESTS_PATCH_TARGET) > $MANIFESTS_PATCH_TARGET
              fi
          done
        working-directory: kubernetes-manifests/${{ env.MANIFESTS_APPLICATION }}

      - name: Commit & Push changes
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.DEVOPS_GITHUB_PERMANENT_TOKEN }}
          repository: "${{ env.MANIFESTS_REPOSITORY }}"
          directory: ./kubernetes-manifests
          branch: sandbox
          message: "From Zeroshot 2.0 Action (Manually Triggered)"
